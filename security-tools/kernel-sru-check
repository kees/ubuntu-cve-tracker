#!/usr/bin/env python
# Author: Kees Cook <kees@canonical.com>
# Copyright (C) 2011 Canonical, Ltd.
# License: GPLv3
#
# Based on https://wiki.ubuntu.com/Kernel/kernel-sru-workflow
# this script implements the security team's first step of:
#
# "When the security team detects that the Security-signoff task is in
# the ready-to-start state (status: Confirmed), they change the tasks
# state to in-progress (status: In Progress). The task is reassigned
# to the individual working the task."
#
# The rest of the procedure is done manually:
#
# "They take care of any tasks they deem necessary prior to having an
# archive admin copy the release to the security pocket. If there are no
# CVEs, the security team sets the Security-signoff task to the not-needed
# state (status: Invalid). If there are CVEs in the release and the security
# team has signed-off on the release being promoted to the security pocket
# (once all testing passes successfully) they change the status of the
# Security-signoff task to completed (status: Fix Released)."
from __future__ import print_function

import time
import optparse
import httplib2
import re

parser = optparse.OptionParser()
parser.add_option("--api-version", help="Which LP API Version to use (default: 1.0)", action='store', default='1.0')
parser.add_option("--debug", help="Show HTTP requests", action='store_true', default=False)
parser.add_option("--task", help="which task series to focus on (default: security-signoff)", action='store', default='security-signoff')
(opt, args) = parser.parse_args()

if opt.debug:
    httplib2.debuglevel = 1
import lpl_common

count = 10
while True:
    try:
        lp = lpl_common.connect(version=opt.api_version)
        sec = lp.projects['kernel-sru-workflow'].getSeries(name=opt.task)
        break
    except:
        count -= 1
        if count <= 0:
            raise
        time.sleep(5)
        pass

def get_ubuntu_release_from_task(signoff_task):
    kernel = signoff_task.bug.title.split(':')[0]
    try:
        for task in signoff_task.bug.bug_tasks:
            # look for the task that starts with the kernel source name
            # and isn't the devel release (so doesn't have (Ubuntu) in
            # the target_name) and is not invalid. For the most current
            # supported release, the devel target may stay open.
            if (task.bug_target_name.startswith('%s ' % kernel) and
                not re.search('\(Ubuntu\)$', task.bug_target_name) and
                task.status != 'Invalid'):
                return task.target.distroseries.name
    except AttributeError as e:
        return "Unkown Release"

for task in sec.searchTasks(omit_targeted=False, status="Confirmed"):
    task.assignee = lp.me
    task.status = "In Progress"
    lpl_common.save(task)

# Report stuff in progress as a reminder
for task in sec.searchTasks(omit_targeted=False, status="In Progress"):
    release = get_ubuntu_release_from_task(task)
    kernel, version = task.bug.title.split(' ')[0:2]
    print(task.title)
    print('%s %s %s' % (release, kernel, version))
    print('https://launchpad.net/bugs/%d' % (task.bug.id))
    print('')
