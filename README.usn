USNs need a consistent voice and feel for the benefit of our users.

This document consolidates rules, guidelines and examples applying to USN
sections.

* General rules for the description

For every CVE involved in the USN, the description should be like:

[<name> discovered that <pkg>....] <problem>. <kinds of exploits possible>.
<result>

The first sentence explains the problem in the package. The second one explains
how an attacker could possibly exploit such problem, resulting in a security
issue.

** Discoverer
For the discoverer <name>, check $UCT for the Discovered-by field. If itâ€™s
empty, look for the discoverer in bugs, patches, etc. We only use real names
(not nicknames or organizations) in credits and be aware that the patch
supplier is not always the discoverer. If there is no discoverer available,
simply use: "It was discovered that <pkg> ..."

** Affected packages
For <pkg>, use the upstream package name in the title, description and
isummary (issue summary) sections. This not always matches with the ubuntu
source package name being patched. Only mention the package name, not affected
versions.

Make sure the source package description was properly set for every affected
release (i.e. the value for the usn.py --source-description argument in the
generated usn shell script is set). If it was not automatically populated, make
sure the source package is present in $UCT/meta_lists/package_info_overrides.json
and add it if it is not.

** CVEs references
If the USN involves multiple CVEs, write one paragraph for each one. Add
(CVE-XXXX-XXXX) at the end of each description, after the final dot.

If the description is identical for multiple CVEs, consolidate all into one
paragraph and list the CVEs in the brackets. e.g. (CVE-XXXX-XXXX, CVE-XXXX-XXXY)

If there is only one CVE being fixed, do not add the CVE number.

If a CVE only affected some of the releases mentioned in the USN, suffix the
paragraph with the sentence `This issue only affected <releases>.`, e.g.:
Ubuntu 16.04 ESM, Ubuntu 18.04 LTS and Ubuntu 20.04 LTS.

** Terms
Spell out terms. Instead of using "DoS", use "denial of service".

Don't capitalize terms. Instead of using "Denial of Service" use "denial of
service".

Avoid non-inclusive terms and phrases. Use "allowlist" in place of "whitelist"
and "denylist" or "blocklist" in place of "blacklist". Find alternative terms in
https://git.launchpad.net/usn-tool/tree/woke.yaml The scripts involved in the
USN publication process will use this suggestions to report possible
non-inclusive terms being mentioned.

** Vulnerability explanation

Be specific, but not overly detailed. Avoid being too technical. Use "under
certain circumstances" instead of detailing specific files, functions, etc.

Write the description in past tense. e.g.: "MySQL had a vulnerability" vs
"MySQL has a vulnerability".

If possible, fill in details on the adversary, e.g:
<An unprivileged || A privileged> <local || remote> attacker <with
x privileges>. If a live connection is needed for the vulnerability to be
exploited, use "authenticated user" instead of "attacker" to give a better
sense of the scope.

If the vulnerability requires user action, one possible template is:
If a user <or automated system> were tricked into <opening a specially crafted
<file type> || performing <action>> an attacker could possibly use this issue
to <result>.

For <kinds of exploits possible>, generally try to be as specific as possible.
Add: "<adversary> could possibly use this issue to ..." since we cannot confirm
how the adversary will take advantage of the vulnerability.

If the impact is not clear, use the following generic statement:
"resulting in <result>, or another unspecified impact".

** Regressions

Make sure the USN title is <pkg> regression. The description should say:
USN-XXXX-1 fixed <vulnerabilities | a vulnerability> in <pkg>. Unfortunately
that update <problem> and could introduce a regression. This updated fixes the
problem.

We apologize for the inconvenience.

Original advisory details: <USN-XXXX-1 description>


* General rules for the summary

If several CVEs are fixed in the USN, keep the summary as "Several issues were
fixed in <pkg>" (even if all CVEs share the same description).

Otherwise the summary should be written as: <pkg> could <result> if <condition>

* General rules for the title

<pkg> should respect the upstream name. If more than one CVE is fixed, make
sure the title is in plural: <pkg> vulnerabilities

* General rules for affected binaries

Even though more than one binary can be generated as part of the source package
update, the USN should only list the binary/binaries that are indeed affected
by the CVE/CVEs being fixed for every release.

* Examples

Memory management
-----------------
<name> discovered that <pkg> did not properly manage memory <condition>.
<kinds of exploits possible>. <result>

It was discovered that HTMLDOC did not properly manage memory under certain
circumstances. If a user were tricked into opening a specially crafted HTML
file, a remote attacker could possibly use this issue to cause HTMLDOC to
crash, resulting in a denial of service, or possibly execute arbitrary code

Florian Weimer discovered that Cron incorrectly handled certain memory
operations during crontab file creation. An attacker could possibly use
this issue to cause a denial of service

It was discovered that Thunderbird did not properly manage memory when
using XUL tree elements. If a user were tricked into viewing malicious
content, a remote attacker could cause a denial of service or possibly
execute arbitrary code with the privileges of the user invoking the
programs.

Danilo Ramos discovered that rsync incorrectly handled memory when
performing certain zlib deflating operations. An attacker could use this
issue to cause rsync to crash, resulting in a denial of service, or
possibly execute arbitrary code.

It was discovered that FFmpeg incorrectly handled memory when using certain
filters. An attacker could possibly use this issue to cause a denial of service
or other unspecified impact.

User input
-----------------
<name> discovered that <pkg> did not properly manage certain inputs.
<kinds of exploits possible>. <result>

Han Zheng discovered that Liblouis incorrectly handled certain inputs.
An attacker could possibly use this issue to cause a crash

File management
-----------------
<name> discovered that <pkg> did not properly manage certain files.
<kinds of exploits possible>. <result>

It was discovered that Ghostscript incorrectly handled certain PostScript
files. If a user or automated system were tricked into processing a
specially crafted file, a remote attacker could possibly use this issue to
access arbitrary files, execute arbitrary code, or cause a denial of
service.

It was discovered that nginx incorrectly handled files with
certain modification dates. A remote attacker could possibly
use this issue to cause a denial of service or other unspecified
impact.

Crafted websites
-----------------
It was discovered that Go applications incorrectly handled uploaded content. If
a user were tricked into visiting a malicious page, a remote attacker could
exploit this with a crafted file to conduct cross-site scripting (XSS) attacks.

Permissions
-----------------
<name> discovered that <pkg> incorrectly handled permissions <condition>.
<kinds of exploits possible>. <result>

It was discovered that the postinst maintainer script in Cron unsafely
handled file permissions during package install or update operations.
An attacker could possibly use this issue to perform a privilege
escalation attack

Jan Schejbal discovered that Paramiko incorrectly handled permissions when
writing private key files. A local attacker could possibly use this issue
to gain access to private keys.

Dan Rabe discovered that OpenJDK incorrectly verified access permissions
in the JAXP component. An attacker could possibly use this to specially
craft an XML file to obtain sensitive information.

James Troup discovered that snap did not properly manage the permissions for
the snap directories. A local attacker could possibly use this issue to expose
sensitive information

Temporary file race
-----------------
<name> discovered that <pkg> created temporary files in an insecure way.
<Local|Remote> users could exploit a race condition to create or overwrite
files with the privileges of the user invoking the program.

User-assisted
-----------------
<name> discovered that <pkg> did <error condition>.  If a user were tricked
into opening a specially crafted <file type>, an attacker could <result>
in <pkg>.

It was discovered that libpng did not properly perform bounds checking and
comparisons in certain operations. If a user were tricked into opening a
specially crafted PNG image, an attacker could cause a denial of service in
applications linked against libpng.

Remote vulnerability
-----------------
<name> discovered that <pkg> did <error condition>. A remote attacker could
<attack technique> to the server and <result>.

Nahuel Riva and Gerardo Richarte discovered that the DHCP server did not
correctly handle certain client options. A remote attacker could send malicious
DHCP replies to the server and execute arbitrary code. 

Remote authenticated user vulnerability
-----------------
<name> discovered that <pkg> did <error condition>. An authenticated user could
<attack technique> to <result>.

Neil Kettle discovered that MySQL could be made to dereference a NULL pointer
and divide by zero. An authenticated user could exploit this with a crafted IF
clause, leading to a denial of service. (CVE-2007-2583)

Automated system
-----------------
<name> discovered that <pkg> did <error condition>. If a user or automated
system were tricked...

It was discovered that bzip2 did not correctly handle certain malformed
archives. If a user or automated system were tricked into processing a
specially crafted bzip2 archive, applications linked against libbz2 could be
made to crash, possibly leading to a denial of service. 

Local vulnerability
-----------------
<name> discovered that <pkg> did <error condition>. A local user could <attack
technique> and <result>.

Ludwig Nussel discovered that mount and umount did not properly drop privileges
when using helper programs. Local users may be able to bypass security
restrictions and gain root privileges using programs such as mount.nfs or
mount.cifs.

Machine in the middle
-----------------
<name> discovered that <pkg> did not <error condition> when using a secure
connection. If a remote attacker were able to intercept communication this
flaw could be exploited to view sensitive information.

It was discovered that Pidgin did not validate SSL certificates when using a
secure connection. If a remote attacker were able to intercept
communications this flaw could be exploited to view sensitive information.

Summary
-----------------
ImageMagick could be made to crash if it opened a specially crafted file.

e2fsprogs could be made to crash or possibly run programs if it processed a
specially crafted file system image

Ruby could be made to crash or read sensitive information when processing
certain input.

FreeRDP could allow unintended access to network services.
