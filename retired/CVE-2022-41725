PublicDateAtUSN: 2023-02-28 18:15:00 UTC
Candidate: CVE-2022-41725
PublicDate: 2023-02-28 18:15:00 UTC
References:
 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41725
 https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E
 https://github.com/golang/go/commit/5c55ac9bf1e5f779220294c843526536605f42ab [1.19]
 https://ubuntu.com/security/notices/USN-6140-1
Description:
 A denial of service is possible from excessive resource consumption in
 net/http and mime/multipart. Multipart form parsing with
 mime/multipart.Reader.ReadForm can consume largely unlimited amounts of
 memory and disk files. This also affects form parsing in the net/http
 package with the Request methods FormFile, FormValue, ParseMultipartForm,
 and PostFormValue. ReadForm takes a maxMemory parameter, and is documented
 as storing "up to maxMemory bytes +10MB (reserved for non-file parts) in
 memory". File parts which cannot be stored in memory are stored on disk in
 temporary files. The unconfigurable 10MB reserved for non-file parts is
 excessively large and can potentially open a denial of service vector on
 its own. However, ReadForm did not properly account for all memory consumed
 by a parsed form, such as map entry overhead, part names, and MIME headers,
 permitting a maliciously crafted form to consume well over 10MB. In
 addition, ReadForm contained no limit on the number of disk files created,
 permitting a relatively small request body to create a large number of disk
 temporary files. With fix, ReadForm now properly accounts for various forms
 of memory overhead, and should now stay within its documented limit of 10MB
 + maxMemory bytes of memory consumption. Users should still be aware that
 this limit is high and may still be hazardous. In addition, ReadForm now
 creates at most one on-disk temporary file, combining multiple form parts
 into a single temporary file. The mime/multipart.File interface type's
 documentation states, "If stored on disk, the File's underlying concrete
 type will be an *os.File.". This is no longer the case when a form contains
 more than one file part, due to this coalescing of parts into a single
 file. The previous behavior of using distinct files for each form part may
 be reenabled with the environment variable GODEBUG=multipartfiles=distinct.
 Users should be aware that multipart.ReadForm and the http.Request methods
 that call it do not limit the amount of disk consumed by temporary files.
 Callers can limit the size of form data with http.MaxBytesReader.
Ubuntu-Description:
Notes:
 mdeslaur> containerd doesn't appear to use the vulnerable functions
Mitigation:
Bugs:
 https://go.dev/issue/58006
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 nvd: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H [7.5 HIGH]

Patches_golang-1.19:
upstream_golang-1.19: needs-triage
trusty_golang-1.19: ignored (out of standard support)
xenial_golang-1.19: ignored (out of standard support)
bionic_golang-1.19: DNE
focal_golang-1.19: DNE
jammy_golang-1.19: DNE
kinetic_golang-1.19: released (1.19.2-1ubuntu1.1)
lunar_golang-1.19: not-affected (1.19.8-1)
devel_golang-1.19: not-affected (1.19.9-1)

Patches_golang-1.20:
upstream_golang-1.20: released (1.20.1-1)
trusty_golang-1.20: ignored (out of standard support)
xenial_golang-1.20: ignored (out of standard support)
bionic_golang-1.20: DNE
focal_golang-1.20: DNE
jammy_golang-1.20: DNE
kinetic_golang-1.20: DNE
lunar_golang-1.20: not-affected (1.20.1-1)
devel_golang-1.20: not-affected (1.20.1-1)

Patches_containerd:
upstream_containerd: not-affected
trusty_containerd: ignored (out of standard support)
xenial_containerd: ignored (out of standard support)
esm-apps/xenial_containerd: not-affected
bionic_containerd: not-affected
esm-apps/bionic_containerd: not-affected
focal_containerd: not-affected
jammy_containerd: not-affected
kinetic_containerd: not-affected
lunar_containerd: not-affected
devel_containerd: not-affected
