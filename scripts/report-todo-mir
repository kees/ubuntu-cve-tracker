#!/usr/bin/env python3
# Copyright 2018, Canonical, Ltd.
# Author: Alex Murray <alex.murray@canonical.com>
# License: GPLv3
#
# Report MIRs for the security team
#

from __future__ import print_function

import argparse
import re
import sys
from launchpadlib.launchpad import Launchpad
import cve_lib

# by default we want all not in Fix Released, Fix Committed, Opinion, Invalid,
# Won't Fix & Expired which leaves the following
search_status = [
    'New',
    'Incomplete',
    'Confirmed',
    'Triaged',
    'In Progress',
]

# all acceptable LP statuses
all_statuses = search_status + [
    'Fix Released',
    'Fix Committed',
    'Opinion',
    'Invalid',
    "Won't Fix",
]

parser = argparse.ArgumentParser()
parser.add_argument("--debug", help="Verbose processing output", action='store_true')
parser.add_argument("--team", help="Find bugs for team (default ubuntu-security)", metavar="TEAM", action='store', default='ubuntu-security')
parser.add_argument("--status", help="Specify status for bugs", metavar="STATUS", action='append', choices=all_statuses)
parser.add_argument("--priority", help="Specify priority for bugs", metavar="PRIORITY", action='store', default=None)
parser.add_argument("--last-message-date", help="Sort bugs by their most recent message", action='store_true')
parser.add_argument("--missing-jira-tag", help="Report only bugs that are missing an associated Jira tag", action='store_true')
parser.add_argument("--oneline", help="Compressed output useful for cronjobs ", action='store_true')

args = parser.parse_args()

def debug(s):
    '''Print debug message'''
    if args.debug:
        print("DEBUG: %s" % (s), file=sys.stderr)

def sort_by_date_last_message(task):
    return task[1].bug.date_last_message

def sort_by_id(task):
    return task[0]


class MIRBug():
    def __init__(self, id, task):
        debug(task.title)
        self.task = task
        self.status = task.status
        self.importance = task.importance
        self.bugid = task.bug.id
        self.tags = task.bug.tags

        self.cves = []
        tcves = task.bug.cves
        if tcves != None:
            for c in tcves:
                self.cves.append("CVE-" + c.sequence)

        bug_target_name = task.bug_target_name
        if not ' (' in bug_target_name:
            raise ValueError("Skipping target name=%s (LP: #%d)" % (bug_target_name, self.bugid))

        self.pkg, target = bug_target_name.split(' (', 1)
        self.target = target.split(')')[0]
        if ' ' in target:
            self.target, self.targeted_to = target.split(' ', 1)

        # XXX not sure how different targeted_to is from release...
        self.release = "ubuntu"
        if ':' in id:
            self.release = id.split(':')[1]

    def print_detail(self, display_last_msg_date=False):
        print("=== Source: %s (%s) ===" % (self.pkg, self.release))
        print(" * Status: %s" % self.status, end=" ")
        if self.status == "Fix Committed":
            print("(committed on %s)" % str(self.task.date_fix_committed).split(' ')[0])
        elif self.status == "In Progress":
            print("(marked 'In Progress' on %s)" % str(self.task.date_in_progress).split(' ')[0])
        else:
            print("")

        print(" * Priority: %s" % self.importance)

        if self.tags:
            print(" * Tags: %s" % ' '.join(self.tags))

        print(" * URL: https://launchpad.net/bugs/%d" % self.bugid)

        if len(self.cves) > 0:
            print(" * CVES: %s" % (" ".join(self.cves)))

        if display_last_msg_date:
            print(" * Last message: %s" % self.task.bug.date_last_message);

        print("")

    def get_jira_tags(self, prefix="sec"):
        return [t for t in self.tags if t.startswith(prefix.lower() + '-')]

    def print_oneline(self):
        output = f"[{self.bugid}] {self.pkg}"
        if self.release != 'ubuntu':
            output += f"/{self.release}"
        output += f" ({self.status}/{self.importance}) "
        output += " ".join(self.get_jira_tags('sec'))
        print(output)

def print_bugs(bugs, args):
    '''Output a collection of bugs'''
    if args.last_message_date:
        bugs = sorted(bugs.items(), key=sort_by_date_last_message, reverse=True)
    else:
        bugs = sorted(bugs.items(), key=sort_by_id)

    count = 0
    for (id, task) in bugs:
        try:
            mir_bug = MIRBug(id, task)
        except ValueError as e:
            print(e, file=sys.stderr)
            continue

        if args.status and mir_bug.status not in args.status:
               debug("Skipping LP: #%d (%s != %s)" % (mir_bug.bugid, mir_bug.status, args.status))
               continue
        if args.priority and mir_bug.importance.lower() != args.priority.lower():
               debug("Skipping LP: #%d (%s != %s)" % (mir_bug.bugid, mir_bug.importance, args.priority))
               continue
        if mir_bug.target and mir_bug.target.lower() != 'ubuntu':
            debug('skipping target "%s" (%s) (LP: #%d)' % (mir_bug.target, mir_bug.pkg, mir_bug.bugid))
            continue
        if mir_bug.status in ['Fix Released', 'Invalid', "Won't Fix"]:
            debug('skipping (pkg:%s status:%s LP: #%d)' % (mir_bug.pkg, mir_bug.status, mir_bug.bugid))
            continue
        if args.missing_jira_tag and mir_bug.get_jira_tags('sec') != []:
            debug('skipping (pkg:%s LP: #%d tags: %s)' % (mir_bug.pkg, mir_bug.bugid, mir_bug.tags))
            continue
        if not re.match(r'^[a-z0-9][a-z0-9+\.\-]+$', mir_bug.pkg):
            print("Bad package name '%s' (LP: #%d)" % (mir_bug.pkg, mir_bug.bugid), file=sys.stderr)
            continue

        if args.oneline:
            mir_bug.print_oneline()
        else:
            mir_bug.print_detail(args.last_message_date)

        count += 1

    # How many unique bugs did we report on?
    return count

# Load configuration
cve_lib.read_config()

# API interface
debug("Connecting to LP ...")
lp = Launchpad.login_anonymously("report-todo-mir", "production", version="devel")

ubuntu = lp.distributions['ubuntu']
debug("Distribution: %s" % ubuntu)
team = lp.people[args.team]
mir_team = lp.people['ubuntu-mir']
debug("Team: %s" % team)

if args.status:
    search_status = args.status

debug("Loading bugs ...")
bugs = {}
# get bugs for a specific series, then for 'Ubuntu' if we haven't already added
# the bug
for rel in cve_lib.releases + ['ubuntu']:
    if rel == 'ubuntu':
        obj = ubuntu
    else:
        series = ubuntu.getSeries(name_or_version=rel)
        if not series.active:
            continue
        obj = series

    debug("")
    # get team members
    assignees = [member.member for member in team.members_details]
    debug("Gathering MIR bugs for %s assigned to %s and their members %s..." %
          (rel, team.name, [assignee.name for assignee in assignees]))
    for assignee in assignees + [team]:
        task_collection = obj.searchTasks(bug_subscriber=mir_team,
                                           assignee=assignee,
                                           omit_targeted=False,
                                           status=search_status)

        for task in task_collection:
            # handle bugs which list multiple packages in the single MIR as
            # separate bugs
            pkg = task.bug_target_name.split(' (')[0]
            bugid = str(task.bug.id) + pkg + ":" + rel
            if rel != 'ubuntu' or bugid not in bugs:
                bugs[bugid] = task

debug("Found %d bugs across all supported releases" % len(bugs))

n = print_bugs(bugs, args)

if args.status:
    print("%d bugs found for '%s' in %s with status '%s'" % (n, args.team, rel, "|".join(search_status)))
else:
    print("%d open bugs found for '%s' in %s" % (n, args.team, rel))

sys.exit(0)

