#!/usr/bin/env python3

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Author: Alex Murray <alex.murray@canonical.com>
# Copyright (C) 2005-2009 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# ./scripts/report-cve-age.py hardy
# ./scripts/report-cve-age.py hardy | cut -d" " -f2 | sort | uniq -c | sort -n | awk '{print $2 " " $1}' | sort -n > age.data
#
# Report age of CVEs at time of USN publication

import os
import sys
import optparse
import cve_lib, usn_lib

import source_map
source_map = source_map.load()
releases = cve_lib.releases
config = cve_lib.read_config()

default_db = config['usn_db_copy']
if '-all' not in default_db:
    tmp = os.path.splitext(default_db)
    if len(tmp) == 2:
        default_db = "%s-all%s" % (tmp[0], tmp[1])

parser = optparse.OptionParser()
parser.add_option("--with-eol", help="Also show those CVEs in EOL releases", action="store_true", default=False)
parser.add_option("-S", "--skip-devel", help="Show only those CVEs *not* in the current devel release", action="store_true")
parser.add_option("-D", "--only-devel", help="Show only those CVEs in the current devel release", action="store_true")
parser.add_option("--db", help="Specify the USN database to load", metavar="FILENAME", default=default_db)
parser.add_option("-m", "--only-supported", help="Show only those CVEs that are supported", action="store_true")
parser.add_option("-d", "--debug", help="Report debug information while loading", action="store_true")
parser.add_option("--priority", help="Comma separated list of priorities to include in the report", action="store", metavar="PRIORITY")
parser.add_option("--action", help="Change report style ('list'(default), 'plot'", action="store", metavar="ACTION", default='list')
parser.add_option("--buckets", help="Comma separate list of value buckets to group plot ages into (default is None)", action="store", metavar="AGES", default=None)
parser.add_option("--html", help="With the 'plot' action, generate an HTML output file with links to CVEs and USNs", action="store", metavar="FILENAME", default=None)
(opt, args) = parser.parse_args()

if not os.path.exists(opt.db):
    print("Cannot read %s" % (opt.db), file=sys.stderr)
    sys.exit(1)
db = usn_lib.load_database(opt.db)

releases = cve_lib.releases
if opt.with_eol is False:
    for eol in cve_lib.eol_releases:
        if eol in releases:
            releases.remove(eol)
if opt.skip_devel and len(cve_lib.devel_release)>0:
    releases.remove(cve_lib.devel_release)

if opt.only_devel:
    releases = [cve_lib.devel_release]

if opt.priority:
    opt.priority = opt.priority.split(',')

bucket_values = []
bucket_names = dict()
if opt.buckets:
    prev = None
    buckets = []
    for value in [int(x) for x in opt.buckets.split(',')]:
        days = '%d' % (value)
        if prev != None:
            if value == -1:
                days = '%d+' % (prev+1)
            elif prev != value - 1:
                days = '%d-%d' % (prev+1, value)
        prev = value
        bucket_values.append(value)
        bucket_names.setdefault(value,days)
    if bucket_values[-1] != -1:
        raise ValueError("Last bucket value must be -1")

# Global CVE info cache
info = dict()

release = None
if len(args)>0:
    release = args[0]
if release and release not in releases:
    raise ValueError("'%s' must be one of '%s'" % (release, "', '".join(releases)))

def bucketize(value):
    if not opt.buckets:
        return value
    for bucket in bucket_values:
        if bucket == -1:
            return bucket
        if value <= bucket:
            return bucket
    # not possible?
    return -1

def fixed_map(priority=None):
    fixed = []
    for usn in sorted(db.keys()):
        if not 'cves' in db[usn]:
            continue
        for cve in db[usn]['cves']:
            if not cve.startswith('CVE-'):
                continue

            if not release or release in db[usn]['releases']:
                # Load CVE if it isn't already cached
                if not cve in info:
                    try:
                        info.setdefault(cve, cve_lib.load_cve(cve_lib.find_cve(cve)))
                    except Exception as e:
                        print(sys.stderr, "Skipping %s: %s" % (cve, str(e)), file=sys.stderr)
                        continue
                # Skip those without PublicDates for the moment
                if info[cve]['PublicDate'].strip() == "":
                    print("%s: empty PublicDate" % (cve), file=sys.stderr)
                    continue

                # Check priority
                # from the all releases or a specific release, find the
                # mapping of CVE priority based on the package that was
                # fixed in the USN.  In the case of multiple match, first
                # most specific wins.
                max_specificity = -1
                cve_priority = info[cve]['Priority']
                for rel in db[usn]['releases']:
                    if not release or release == rel:
                        if 'sources' in db[usn]['releases'][rel]:
                            for pkg in db[usn]['releases'][rel]['sources']:
                                specificity, specific_priority = cve_lib.contextual_priority(info[cve], pkg, rel)
                                if specificity > max_specificity:
                                    cve_priority = specific_priority
                                    max_specificity = specificity

                if not priority or cve_priority == priority:
                    oldest = None
                    if release:
                        oldest = cve_lib.release_stamp(release)
                    fixed.append([cve, cve_lib.cve_age(cve, info[cve]['PublicDate'], db[usn]['timestamp'], oldest), usn, cve_priority])
    return fixed

if opt.action == 'list':
    fixed = fixed_map(opt.priority)
    for i in range(0, len(fixed)):
        print(fixed[i][0], fixed[i][1], fixed[i][2], fixed[i][3])
elif opt.action == 'plot':
    priorities = ['untriaged'] + cve_lib.priorities
    if opt.priority:
        priorities = opt.priority
    byage = dict()
    for priority in priorities:
        fixed = fixed_map(priority)
        for item in fixed:
            age = bucketize(item[1])
            byage.setdefault(age,dict())
            byage[age].setdefault(priority, dict())
            byage[age][priority].setdefault('count',0)
            byage[age][priority]['count'] += 1
            byage[age][priority].setdefault('fixed',[])
            byage[age][priority]['fixed'].append(item)
    if opt.buckets:
        ages = bucket_values
    else:
        ages = sorted(byage.keys())
    for age in ages:
        if opt.buckets:
            print(bucket_names[age], end=' ')
        else:
            print(age, end=' ')
        sum = 0
        for priority in priorities:
            if age in byage and priority in byage[age]:
                count = byage[age][priority]['count']
                sum += count
                print(count, end=' ')
            else:
                print('0', end=' ')
        if opt.buckets:
            print(sum, end=' ')
        print()

    if opt.html:
        html = open(opt.html,'w')
        release_name = release
        if not release_name:
            release_name = ""
        else:
            release_name += " "
        print('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">', file=html)
        print('<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">', file=html)
        print("<head><title>Ubuntu %sExposure</title>" % (release_name), file=html)
        print('''<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />)
<meta name="author" content="Canonical Ltd, Kees Cook and Jamie Strandboge" />
<meta name="description" content="Ubuntu Exposure Report" />
<meta name="copyright" content="Canonical Ltd" />
<link rel="StyleSheet" href="toplevel.css" type="text/css" />

</head><body>''', file=html)
        print('<img src="%s.png"><br />' % (".".join(os.path.basename(opt.html).split('.')[0:-1])), file=html)
        print('<table>', file=html)
        print('<tr><th>Days</th><th>Priority</th><th>CVE</th><th>USN</th></tr>', file=html)

        for age in ages:
            for priority in priorities:
                if age in byage and priority in byage[age]:
                    for item in byage[age][priority]['fixed']:
                        cve, days, usn = item[0:3]
                        if days < 0:
                            days = 0
                        print('<tr class="%s"><td class="needed">%d</td><td class="needed">%s</td><td class="cve"><a href="http://people.canonical.com/~ubuntu-security/cve/%s">%s</a></td><td><a href="http://www.ubuntu.com/usn/USN-%s">USN-%s</a></td></tr>' % (priority, days, priority, cve, cve, usn, usn), file=html)

        print('</table>', file=html)
        print("</body></html>", file=html)

else:
    raise(ValueError("No such --action '%s'" % (opt.action)))
