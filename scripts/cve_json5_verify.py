#!/usr/bin/env python3
#
# verify the schema of a cve-json5 and cve-json5-api files
# set --debug to check cve-json5-api before CNA publication
#
# $ ./scripts/cve_verify_json5.py $PATH_TO_JSON
#
# Copyright 2023, Canonical Ltd.
# Author: Mark Esler <mark.esler@canonical.com>


import argparse
import json
import pathlib
import sys
from typing import Tuple

import jsonschema


def debug(msg: str) -> None:
    """print to stderr"""
    print("DEBUG: " + msg, file=sys.stderr)


def load_json(path: pathlib.Path) -> dict:
    """loads generic ascii json files"""
    # NOTE: all files *should* be ascii encoding
    #       https://github.com/CVEProject/cvelistV5/issues/25
    # pylint: disable=unspecified-encoding
    with open(path) as j:
        data = json.load(j)
    return data


def load_schema(path: pathlib.Path) -> Tuple[dict, dict]:
    """returns json schemas"""
    json5_schema = load_json(path)
    json5_schema_cna = json5_schema["definitions"]["cnaPublishedContainer"]["properties"]
    return json5_schema, json5_schema_cna


def debug_cve_json5_api() -> bool:
    """tests fields which the CVE Project requires"""

    ready_for_publication = True

    try:
        # in case of multiple packages, check all
        # first check is cve["affected"][0]["versions"][0]["status"]
        for i in cve["affected"]:
            for j in i["versions"]:
                # pylint: disable=pointless-statement
                j["status"]
    except KeyError:
        ready_for_publication = False
        debug("The affected package(s) must be described for publication.")

    try:
        for i in cve["metrics"]:
            # pylint: disable=pointless-statement
            i["cvssV3_1"]["vectorString"]
    except KeyError:
        ready_for_publication = False
        debug("CVSS metrics are required for publication.")

    return ready_for_publication


def verify_cve_json5() -> bool:
    """verify cve-json5"""
    if jsonschema.Draft7Validator(schema).is_valid(cve):
        return True
    return False


def verify_cve_json5_api() -> bool:
    """verify cve-json5-api and optionally check for publication"""
    if jsonschema.Draft7Validator(schema_cna).is_valid(cve):
        if DEBUG:
            if debug_cve_json5_api():
                debug("cve-json5-api is ready for publication.")
            else:
                debug("cve-json5-api file is not ready for CNA publication.")
        return True
    return False


def verify() -> None:
    """check if file is a valid cve-json5 type"""
    if verify_cve_json5():
        print("valid cve-json5 file")
    elif verify_cve_json5_api():
        print("valid cve-json5-api file")
    else:
        raise TypeError("invalid cve-json5 or cve-json5-api file")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="cve-verify")
    parser.add_argument("cve_json5_path", type=pathlib.Path)
    parser.add_argument("--debug", help="add debug info", action="store_true")
    cve_file = parser.parse_args().cve_json5_path
    DEBUG = parser.parse_args().debug

    cve = load_json(cve_file)
    uct_path = pathlib.Path(__file__).resolve().parent.parent
    schema_path = uct_path.joinpath("./scripts/cve-json5-schema.json")
    schema, schema_cna = load_schema(schema_path)
    verify()
