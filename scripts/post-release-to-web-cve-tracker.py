#!/usr/bin/python3
# Standard library

# I'm storing this here for the moment because I'm not sure where else to store it.

# swagger documentation on the website API:
# https://ubuntu.com/security/api/docs#/default/post_security_releases_json

# attempting to use this script to update hirsute's status to being
# released failed, see
# https://github.com/canonical-web-and-design/ubuntu.com/issues/9617

# can use
#  $ curl -X GET "https://ubuntu.com/security/releases/RELEASE.json" -H "accept: application/json" | jq .
# to see what the website's version of the release is.

import argparse
import difflib
import json
import requests
import os
import sys
from http.cookiejar import MozillaCookieJar

# Local
from macaroonbakery import httpbakery

# raise Exception("Remove this line and update 27-35 with data about the new devel release.")

BASE_URL = "https://ubuntu.com/security/releases"


def authentication(request, payload, url):

    client = httpbakery.Client(cookies=MozillaCookieJar(".login"))

    if os.path.exists(client.cookies.filename):
        client.cookies.load(ignore_discard=True)

    response = client.request(request, url=url, json=payload)
    client.cookies.save(ignore_discard=True)
    print(response, response.text)
    return response


def do_add_release(release, debug):
    action = "POST"
    # For some reason, the website doesn't let us push the "support_tag"
    # attribute
    payload = releases[release].copy()
    payload.pop("support_tag", None)
    url = BASE_URL

    if debug:
        print("%s %s" % (action, url), file=sys.stderr)
        print("%s" % json.dumps(payload, indent=2), file=sys.stderr)
    else:
        return authentication(action, payload, url)


def do_update_release(release, debug):
    action = "PUT"
    # For some reason, the website doesn't let us push the "support_tag"
    # attribute
    payload = releases[release].copy()
    payload.pop("support_tag", None)
    url = "%s/%s.json" % (BASE_URL, payload["codename"])

    if debug:
        print("%s %s" % (action, url), file=sys.stderr)
        print("%s" % json.dumps(payload, indent=2), file=sys.stderr)
    else:
        return authentication(action, payload, url)


def print_json_diff(local_json, remote_json, local_desc, remote_desc):
    local = json.dumps(local_json, sort_keys=True, indent=2).split("\n")
    remote = json.dumps(remote_json, sort_keys=True, indent=2).split("\n")
    d = difflib.unified_diff(local, remote, fromfile=local_desc, tofile=remote_desc, lineterm="", n=len(local))
    for line in d:
        print(line)


def do_validate_release(release, quiet=False):
    is_equal = True
    url = "%s/%s.json" % (BASE_URL, release)
    headers = {"accept": "application/json"}

    # no need to authenticate, it's a public API
    response = requests.get(url=url, headers=headers)
    if response.ok:
        content = response.json()
        # the website contains an extra field that is not part of the
        # publication API
        if not content == releases[release]:
            print_json_diff(releases[release], content, "stored %s info" % release, url)
            is_equal = False
        elif not quiet:
            print("%s (%s) okay:" % (release, releases[release]["version"]))
            print(response.text)

    return is_equal


releases = {
    "impish": {
        "name": "Impish Indri",
        "version": "21.10",
        "codename": "impish",
        "development": True,
        "lts": False,
        "support_tag": "",
        "release_date": "2021-10-14T00:00:00",
        "support_expires": "2022-07-31T00:00:00",
        "esm_expires": "2022-07-31T00:00:00",
    },
    "hirsute": {
        "name": "Hirsute Hippo",
        "version": "21.04",
        "codename": "hirsute",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2021-04-22T00:00:00",
        "support_expires": "2022-01-31T00:00:00",
        "esm_expires": "2022-01-31T00:00:00",
    },
    "groovy": {
        "name": "Groovy Gorilla",
        "version": "20.10",
        "codename": "groovy",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2020-10-20T00:00:00",
        "support_expires": "2021-07-31T00:00:00",
        "esm_expires": "2021-07-31T00:00:00",
    },
    "focal": {
        "name": "Focal Fossa",
        "version": "20.04",
        "codename": "focal",
        "development": False,
        "lts": True,
        "support_tag": "LTS",
        "release_date": "2020-04-23T00:00:00",
        "support_expires": "2025-04-30T00:00:00",
        "esm_expires": "2030-04-30T00:00:00",
    },
    "bionic": {
        "name": "Bionic Beaver",
        "version": "18.04",
        "codename": "bionic",
        "development": False,
        "lts": True,
        "support_tag": "LTS",
        "release_date": "2018-04-26T00:00:00",
        "support_expires": "2023-04-30T00:00:00",
        "esm_expires": "2028-04-30T00:00:00",
    },
    "xenial": {
        "name": "Xenial Xerus",
        "version": "16.04",
        "codename": "xenial",
        "development": False,
        "lts": True,
        "support_tag": "ESM",
        "release_date": "2016-04-21T00:00:00",
        "support_expires": "2021-04-30T00:00:00",
        "esm_expires": "2024-04-30T00:00:00",
    },
    "trusty": {
        "name": "Trusty Tahr",
        "codename": "trusty",
        "version": "14.04",
        "development": False,
        "lts": True,
        "support_tag": "ESM",
        "release_date": "2014-04-17T00:00:00",
        "support_expires": "2019-04-30T00:00:00",
        "esm_expires": "2022-04-30T00:00:00",
    },
}


def main():
    is_okay = True

    parser = argparse.ArgumentParser(description="CLI to manage Ubuntu Releases on https://ubuntu.com/security/")
    parser.add_argument(
        "--action", required=True, choices=["add", "update", "validate"], action="store", help="API action to perform"
    )
    parser.add_argument(
        "-d", "--debug", action="store_true", help="Don't perform add/update action; instead emit json to stdout"
    )
    parser.add_argument("-q", "--quiet", action="store_true", help="Validate silently unless there's an error")
    parser.add_argument(
        "release", choices=["all"] + list(releases.keys()), action="store", help="release to operate on"
    )
    args = parser.parse_args()

    if args.action == "add":
        do_add_release(args.release, args.debug)
    elif args.action == "update":
        do_update_release(args.release, args.debug)
    elif args.action == "validate":
        if args.release == "all":
            for rel in releases:
                if not do_validate_release(rel, args.quiet):
                    is_okay = False
        else:
            if not do_validate_release(args.release, args.quiet):
                is_okay = False

    return is_okay


if __name__ == "__main__":
    if not main():
        sys.exit(1)
