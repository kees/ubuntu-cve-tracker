#!/usr/bin/python3
# Standard library

# I'm storing this here for the moment because I'm not sure where else to store it.

# swagger documentation on the website API:
# https://ubuntu.com/security/api/docs#/default/post_security_releases_json

# attempting to use this script to update hirsute's status to being
# released failed, see
# https://github.com/canonical-web-and-design/ubuntu.com/issues/9617


import argparse
import json
import requests
import os
import sys
from http.cookiejar import MozillaCookieJar

# Local
from macaroonbakery import httpbakery

# raise Exception("Remove this line and update 27-35 with data about the new devel release.")

BASE_URL = "https://ubuntu.com/security/releases"


def authentication(request, payload, url):

    client = httpbakery.Client(cookies=MozillaCookieJar(".login"))

    if os.path.exists(client.cookies.filename):
        client.cookies.load(ignore_discard=True)

    response = client.request(request, url=url, json=payload)
    client.cookies.save(ignore_discard=True)
    print(response, response.text)
    return response


def do_add_release(release, debug):
    action = "POST"
    payload = releases[release]
    url = BASE_URL

    if debug:
        print("%s %s" % (action, url), file=sys.stderr)
        print("%s" % json.dumps(payload, indent=2), file=sys.stderr)
    else:
        return authentication(action, payload, url)


def do_update_release(release, debug):
    action = "PUT"
    payload = releases[release]
    url = "%s/%s.json" % (BASE_URL, payload["codename"])

    if debug:
        print("%s %s" % (action, url), file=sys.stderr)
        print("%s" % json.dumps(payload, indent=2), file=sys.stderr)
    else:
        return authentication(action, payload, url)


def do_validate_release(release):
    url = "%s/%s.json" % (BASE_URL, release)
    headers = {"accept": "application/json"}

    # no need to authenticate, it's a public API
    response = requests.get(url=url, headers=headers)
    print(response.text)
    if response.ok:
        content = response.json()
        # the website contains an extra field that is not part of the
        # publication API
        content.pop("support_tag", None)
        assert content == releases[release]


releases = {
    "impish": {
        "name": "Impish Indri",
        "version": "21.10",
        "codename": "impish",
        "development": True,
        "lts": False,
        "release_date": "2021-10-14T00:00:00",
        "support_expires": "2022-07-31T00:00:00",
        "esm_expires": "2022-07-31T00:00:00",
    },
    "hirsute": {
        "name": "Hirsute Hippo",
        "version": "21.04",
        "codename": "hirsute",
        "development": False,
        "lts": False,
        "release_date": "2021-04-22T00:00:00",
        "support_expires": "2022-01-31T00:00:00",
        "esm_expires": "2022-01-31T00:00:00",
    },
    "groovy": {
        "name": "Groovy Gorilla",
        "version": "20.10",
        "codename": "groovy",
        "development": False,
        "lts": False,
        "release_date": "2020-10-20T00:00:00",
        "support_expires": "2021-07-31T00:00:00",
        "esm_expires": "2021-07-31T00:00:00",
    },
}


def main():

    parser = argparse.ArgumentParser(description="CLI to manage Ubuntu Releases on https://ubuntu.com/security/")
    parser.add_argument(
        "--action", required=True, choices=["add", "update", "validate"], action="store", help="API action to perform"
    )
    parser.add_argument("--debug", action="store_true", help="Don't perform update action; instead emit json to stdout")

    parser.add_argument(
        "release", choices=["all"] + list(releases.keys()), action="store", help="release to operate on"
    )
    args = parser.parse_args()

    if args.action == "add":
        do_add_release(args.release, args.debug)
    elif args.action == "update":
        do_update_release(args.release, args.debug)
    elif args.action == "validate":
        if args.release == "all":
            for rel in releases:
                do_validate_release(rel)
        else:
            do_validate_release(args.release)


if __name__ == "__main__":
    main()
